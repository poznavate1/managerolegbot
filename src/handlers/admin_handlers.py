import os
import re


from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext  
from aiogram.types import FSInputFile

from keyboards.keyboards import (
    get_admin_keyboard, get_moderation_keyboard,
    get_moderation_actions_keyboard, get_inline_back_button,
    get_delete_keyboard, get_list_keyboard, get_start_keyboard
)
from states.states import (
    ModerationStates, DeleteContactState, GetImageState,
    AddContactState
)
from utils import moderation, process_photo_with_code
from dp_manager import (
    add_user, delete_user_by_code, clear_table,
    save_img_path, get_all_codes_with_contacts,
    get_img_path_by_code, get_message_id_by_code
)
from config import ALLOWED_USER_IDS, BOT_TOKEN
import logging



router = Router()
bot = Bot(token=BOT_TOKEN)

def validate_code(code: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç —Ä–æ–≤–Ω–æ –∏–∑ 4 —Ü–∏—Ñ—Ä."""
    return bool(code and code.isdigit() and len(code) == 4)

@router.message(lambda message: message.text == "–ú–µ–Ω—é")
async def handle_menu(message: Message):
    if message.from_user.id not in ALLOWED_USER_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.")
        return
    
    menu_kb = get_admin_keyboard()
    back_button = get_inline_back_button()
    await message.answer("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=menu_kb)
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=back_button)

@router.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã")
async def handle_add_contacts(message: Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USER_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await state.set_state(AddContactState.waiting_for_code)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
        reply_markup=get_inline_back_button()
    )

@router.message(AddContactState.waiting_for_code)
async def process_code(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥.")
        return

    if not validate_code(message.text):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 4 —Ü–∏—Ñ—Ä.",
            reply_markup=get_inline_back_button()
        )
        return

    await state.update_data(code=message.text)
    await state.set_state(AddContactState.waiting_for_contact_info)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:")

@router.message(AddContactState.waiting_for_contact_info)
async def process_contact_info(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
        return

    try:
        data = await state.get_data()
        code = data.get('code')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
        result = add_user(code, str(message.message_id), message.chat.id)
        if "—É—Å–ø–µ—à–Ω–æ" not in result.lower():
            await message.answer(result, reply_markup=get_inline_back_button())
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º
        try:
            photo_path = process_photo_with_code(code)
            if photo_path and os.path.isfile(photo_path):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                save_result = save_img_path(code, photo_path)
                if "—É—Å–ø–µ—à–Ω–æ" in save_result.lower():
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    photo = FSInputFile(photo_path)
                    await message.answer_photo(
                        photo=photo,
                        caption=f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n–ö–æ–¥: {code}",
                        reply_markup=get_inline_back_button()
                    )
                else:
                    await message.answer(
                        f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {save_result}",
                        reply_markup=get_inline_back_button()
                    )
            else:
                await message.answer(
                    "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                    reply_markup=get_inline_back_button()
                )
        except Exception as img_error:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_error}")
            await message.answer(
                "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.",
                reply_markup=get_inline_back_button()
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞.",
            reply_markup=get_inline_back_button()
        )

    await state.clear()

    
@router.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã")
async def handle_delete_contacts(message: Message):
    if message.from_user.id not in ALLOWED_USER_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_delete_keyboard()
    )

@router.callback_query(lambda c: c.data == "delete_by_code")
async def handle_delete_by_code(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(DeleteContactState.waiting_for_code)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "clear_database")
async def handle_clear_database(callback_query: CallbackQuery):
    if callback_query.from_user.id not in ALLOWED_USER_IDS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    clear_table()
    await callback_query.message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞.")
    await callback_query.answer()

@router.message(DeleteContactState.waiting_for_code)
async def process_delete_customer(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥.")
        return

    if not validate_code(message.text):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 4 —Ü–∏—Ñ—Ä.",
            reply_markup=get_inline_back_button()
        )
        return

    result = delete_user_by_code(message.text)
    await message.answer(result, reply_markup=get_inline_back_button())
    await state.clear()

@router.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫")
async def handle_list(message: Message):
    try:
        contacts = get_all_codes_with_contacts()
        if not contacts:
            await message.answer(
                "–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç.",
                reply_markup=get_inline_back_button()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        response = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:\n\n"
        for code, contact_text, chat_id in contacts:
            response += f"üîπ –ö–æ–¥: {code}\n"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
            text = contact_text
            urls = re.findall(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text)
            if urls:
                # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
                for url in urls:
                    text = text.replace(url, '')
                response += f"üìù –ö–æ–Ω—Ç–∞–∫—Ç: {text.strip()}\n"
                for url in urls:
                    response += f"üîó –°—Å—ã–ª–∫–∞: {url}\n"
            else:
                response += f"üìù –ö–æ–Ω—Ç–∞–∫—Ç: {text}\n"
            response += "\n"

        await message.answer(
            response,
            reply_markup=get_list_keyboard()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {str(e)}",
            reply_markup=get_inline_back_button()
        )

@router.callback_query(lambda c: c.data == "get_image")
async def process_get_image(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (4 —Ü–∏—Ñ—Ä—ã):")
    await state.set_state(GetImageState.waiting_for_code)
    await callback.answer()

@router.message(GetImageState.waiting_for_code)
async def process_image_code(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥.")
        return

    if not validate_code(message.text):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 4 —Ü–∏—Ñ—Ä.",
            reply_markup=get_inline_back_button()
        )
        return

    code = message.text
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø–æ –∫–æ–¥—É
        img_path = get_img_path_by_code(code)
        if img_path and os.path.isfile(img_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            photo = FSInputFile(img_path)
            await message.answer_photo(
                photo=photo,
                caption=f"üéØ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–¥–∞: {code}",
                reply_markup=get_inline_back_button()
            )
        else:
            await message.answer(
                "‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_inline_back_button()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
            reply_markup=get_inline_back_button()
        )

    await state.clear()



@router.message(lambda message: message.photo)
async def handle_photo(message: Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USER_IDS:
        return
    
    state_data = await state.get_data()
    code = state_data.get('code')
    
    if not code:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return
    
    try:
        photo = message.photo[-1]
        file_id = photo.file_id
        file = await message.bot.get_file(file_id)
        file_path = file.file_path
        
        downloaded_file = await message.bot.download_file(file_path)
        img_path = None
        save_img_path(code, img_path)
        
        await message.answer("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        await state.clear()
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {str(e)}")
        await state.clear()

@router.callback_query(lambda c: c.data == "back_to_main")
async def process_back_to_main(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.message is None:
        return
    await state.clear()
    keyboard = get_start_keyboard(callback_query.from_user.id, ALLOWED_USER_IDS)
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await callback_query.message.delete()
    await callback_query.answer()




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@router.message(lambda message: message.text == "üëÆ‚Äç‚ôÇÔ∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è" and message.from_user.id in ALLOWED_USER_IDS)
async def handle_moderation_menu(message: Message):
    await message.answer(
        "üëÆ‚Äç‚ôÇÔ∏è –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_moderation_actions_keyboard()
    )

@router.callback_query(lambda c: c.data == "unmute_by_id")
async def handle_unmute_request(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üÜî –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:",
        reply_markup=get_inline_back_button()
    )
    await state.set_state(ModerationStates.waiting_for_user_id)
    await callback.answer()

@router.message(ModerationStates.waiting_for_user_id)
async def process_unmute_user(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        if moderation.unmute_user(user_id):
            await message.answer(
                f"‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç—ã",
                reply_markup=get_moderation_actions_keyboard()
            )
        else:
            await message.answer(
                f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
                reply_markup=get_moderation_actions_keyboard()
            )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)",
            reply_markup=get_inline_back_button()
        )
        return
    await state.clear()

@router.callback_query(lambda c: c.data == "muted_list")
async def handle_muted_list(callback: CallbackQuery):
    muted_users = moderation.get_muted_users()
    
    if not muted_users:
        await callback.message.answer(
            "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –ø—É—Å—Ç",
            reply_markup=get_moderation_actions_keyboard()
        )
        await callback.answer()
        return

    message_text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏:\n\n"
    for user in muted_users:
        message_text += (
            f"üë§ ID: {user['user_id']}\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {user['hours_left']} —á–∞—Å–æ–≤\n"
            f"üïí –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {user['muted_until']}\n"
            f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {user['mute_count']}\n"
            f"{'='*30}\n"
        )

    await callback.message.answer(
        message_text,
        reply_markup=get_moderation_actions_keyboard()
    )
    await callback.answer()

# –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.message(lambda message: message.text == "–ú–µ–Ω—é" and message.from_user.id in ALLOWED_USER_IDS)
async def admin_menu(message: Message):
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(lambda c: c.data == "back_to_main")
async def handle_back_to_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )
    await callback.answer()
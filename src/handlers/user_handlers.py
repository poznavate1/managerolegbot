from aiogram import Router, Bot
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from keyboards.keyboards import (
    get_start_keyboard, get_inline_back_button,
    get_help_keyboard, get_list_keyboard
)
from states.states import EnterCodeState
from dp_manager import get_contacts_by_code, get_img_path_by_code
from utils import moderation
from config import ALLOWED_USER_IDS, BOT_TOKEN
import os
import logging

router = Router()
bot = Bot(token=BOT_TOKEN)

def validate_code(code: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç —Ä–æ–≤–Ω–æ –∏–∑ 4 —Ü–∏—Ñ—Ä."""
    return bool(code and code.isdigit() and len(code) == 4)

@router.message(Command("start"))
async def cmd_start(message: Message):
    keyboard = get_start_keyboard(message.from_user.id, ALLOWED_USER_IDS)
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–í–≤–µ—Å—Ç–∏ –∫–æ–¥¬ª\n"
        "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–º–æ—â—å¬ª",
        reply_markup=keyboard
    )

@router.message(lambda message: message.text == "–í–≤–µ—Å—Ç–∏ –∫–æ–¥")
async def handle_enter_code(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –º—É—Ç–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if moderation.is_muted(message.from_user.id):
        return

    await state.set_state(EnterCodeState.waiting_for_code)
    await message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥:",
        reply_markup=get_inline_back_button()
    )

@router.message(EnterCodeState.waiting_for_code)
async def process_code_input(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –º—É—Ç–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if moderation.is_muted(message.from_user.id):
        return

    if not validate_code(message.text):
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        should_mute, attempts_left = moderation.increment_attempts(message.from_user.id)
        
        if should_mute:
            mute_info = moderation.mute_user(message.from_user.id)
            await message.answer(
                f"üö´ –î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n\n"
                f"–í —Å–≤—è–∑–∏ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫, "
                f"–¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞ {mute_info['duration_hours']} —á–∞—Å(–æ–≤).\n\n"
                f"‚è≥ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–Ω—è—Ç–æ: {mute_info['muted_until'].strftime('%Y-%m-%d %H:%M:%S')}"
            )
            await state.clear()
            return
        else:
            await message.answer(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 4 —Ü–∏—Ñ—Ä.\n"
                f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}",
                reply_markup=get_inline_back_button()
            )
            return

    code = message.text
    try:
        contact_data = get_contacts_by_code(code)
        if not contact_data:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –∫–æ–¥–µ
            should_mute, attempts_left = moderation.increment_attempts(message.from_user.id)
            
            if should_mute:
                mute_info = moderation.mute_user(message.from_user.id)
                await message.answer(
                    f"üö´ –î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n\n"
                    f"–í —Å–≤—è–∑–∏ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫, "
                    f"–¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞ {mute_info['duration_hours']} —á–∞—Å(–æ–≤).\n\n"
                    f"‚è≥ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–Ω—è—Ç–æ: {mute_info['muted_until'].strftime('%Y-%m-%d %H:%M:%S')}"
                )
                await state.clear()
                return
            else:
                await message.answer(
                    f"‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                    f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}",
                    reply_markup=get_inline_back_button()
                )
                return

        # –ï—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        if message.from_user.id in moderation.muted_users:
            moderation.muted_users[message.from_user.id]["attempts"] = 0

        message_id, chat_id = contact_data
        # –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.copy_message(
            chat_id=message.chat.id,
            from_chat_id=chat_id,
            message_id=int(message_id),
            reply_markup=get_inline_back_button()
        )
        
        await state.clear()
        
    except Exception as e:
        logging.error(f"Error processing code {code}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_inline_back_button()
        )
        await state.clear()

@router.message(lambda message: message.text == "–ü–æ–º–æ—â—å")
async def handle_help(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –º—É—Ç–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if moderation.is_muted(message.from_user.id):
        return

    help_text = """
‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

1Ô∏è‚É£ –î–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–í–≤–µ—Å—Ç–∏ –∫–æ–¥¬ª –∏ –≤–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
2Ô∏è‚É£ –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
3Ô∏è‚É£ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π üëá
"""
    await message.answer(help_text, reply_markup=get_help_keyboard())

@router.callback_query(lambda c: c.data == "back_to_main")
async def process_back_to_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    keyboard = get_start_keyboard(callback.from_user.id, ALLOWED_USER_IDS)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await callback.answer()

@router.message()
async def handle_unknown_message(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –º—É—Ç–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if moderation.is_muted(message.from_user.id):
        return

    keyboard = get_start_keyboard(message.from_user.id, ALLOWED_USER_IDS)
    await message.answer(
        "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é:",
        reply_markup=keyboard
    )